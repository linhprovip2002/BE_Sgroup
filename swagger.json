{
  "openapi": "3.0.3",
  "info": {
    "title": "Swagger Petstore -USER API",
    "description": "test api and test swagger",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "apiteam@swagger.io"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.11"
  },
  "tags": [
    {
      "name": "user",
      "description": "Operations about user"
    }
  ],
  "paths": {
    "/user/create": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Create user",
        "description": "This can only be done by the logged in user.",
        "operationId": "createUser",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "201": {
            "default": {
              "description": "successful operation",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/user/": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "get user all",
        "description": "",
        "responses": {
          "201": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid username/password supplied"
          }
        }
      }
    },
    "/user/{id}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get user by user name",
        "description": "",
        "operationId": "getUserByName",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The name that needs to be fetched. Use user1 for testing. ",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Update user",
        "description": "This can only be done by the logged in user.",
        "operationId": "updateUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "name that need to be deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Update an existent user in the store",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update user by id in system",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/User",
                  "properties": {
                    "description": {
                      "type": "string",
                      "example": "Successfully updated data!"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Delete user",
        "description": "This can only be done by the logged in user.",
        "operationId": "deleteUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The name that needs to be deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
      
    },
    "/product":{
      "get":{
        "tags": [
          "product"
        ],
        "summary": "get product all",
        "description": "",
        "responses": {
          "201": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid username/password supplied"
          }
        }
      }
    },
    "/product/{id}":{
      "get":{
        "tags": [
          "product"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The name that needs to be fetched. Use user1 for testing. ",
            "required": true
          }
        ],
        "summary": "get product by id",
        "description": "",
        "responses": {
          "201": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid username/password supplied"
          }
        }
      },
      "put":{
        "tags": [
          "product"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The name that needs to be deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Update an existent user in the store",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/product"
              }
            }
          }
        },
        "summary": "update product by id",
        "description": "",
        "responses": {
          "201": {
            "description": "successful update"
          },
          "400": {
            "description": "Invalid username/password supplied"
          }
        }
      },
      "post":{
        "tags": [
          "product"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The name that needs to be deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Create an existent user in the store",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/product"
              }
            }
          }
        },
        "summary": "update product by id",
        "description": "",
        "responses": {
          "201": {
            "description": "successful create"
          },
          "400": {
            "description": "Invalid username/password supplied"
          }
        }
      },
      "delete":{
        "tags": [
          "product"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The name that needs to be deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "summary": "delete product by id",
        "description": "",
        "responses": {
          "201": {
            "description": "successful delete"
          },
          "400": {
            "description": "Invalid username/password supplied"
          }
        }
      }
      },
    "/category":
    {
      "get":{
        "tags": [
          "category"
        ],
        "summary": "get category all",
        "description": "",
        "responses": {
          "201": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid username/password supplied"
          }
        }
      }
    },
    "/category/{category_name}":
    {
      "get":{
        "tags": [
          "category"
        ],
        "parameters": [
          {
            "name": "category_name",
            "in": "path",
            "description": "The name that needs to be fetched. Use user1 for testing. ",
            "required": true
          }
        ],
        "summary": "get product by category",
        "description": "",
        "responses": {
          "201": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid username/password supplied"
          }
        }
      }
    }

  },
  "components": {
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 10
          },
          "fullname": {
            "type": "string",
            "example": "theUser"
          },
          "gender": {
            "type": "boolean",
            "example": true
          },
          "age": {
            "type": "integer",
            "format": "int64",
            "example": 10
          }
        },
        "xml": {
          "name": "user"
        }
      },
      "product":{
        "type": "object",
        "properties":
        {
          "item_name":{
            "type": "string",
            "example": "Ao khoac"
          },
          "quantity":{
            "type": "integer",
            "format": "int64",
            "example": 10
          },
          "category_id":
          {
            "type": "integer",
            "format": "int64",
            "example": 10
          }
         
        }
      },
      "Category":{
        "type": "object",
        "properties":
        {
          "id":{
            "type": "integer",
            "format": "int64",
            "example": 4
          },
          "name":{
            "type": "string",
            "example": "Quan"
          }
        }
      }
    },
    "requestBodies": {
      "UserArray": {
        "description": "List of user object",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        }
      }
    },
    "securitySchemes": {
      "petstore_auth": {
        "type": "oauth2",
        "flows": {
          "implicit": {
            "authorizationUrl": "https://petstore3.swagger.io/oauth/authorize",
            "scopes": {
              "write:pets": "modify pets in your account",
              "read:pets": "read your pets"
            }
          }
        }
      },
      "api_key": {
        "type": "apiKey",
        "name": "api_key",
        "in": "header"
      }
    }
  }
}